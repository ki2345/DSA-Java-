public class Heap_sort {
    public void sort(int arr[])
    {
        int N = arr.length;
        // Build heap (rearrange array)
        for(int i=N/2-1;i>=0;i--)
            heapify(arr,N,i);
        // One by one extract an element from heap
        for(int i=N-1;i>0;i--){
            // Move current root to end
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;
            // call max heapify on the reduced heap
            heapify(arr,i,0);
        }
    }
    void heapify(int arr[], int N, int i)
    {
        int max = i; // Initialize largest as root
        int l = 2 * i + 1;
        int r = 2 * i + 2;

        // If left child is larger than root
        if (l < N && arr[l] > arr[max])
            max = l;

        // If right child is larger than largest so far
        if (r < N && arr[r] > arr[max])
            max = r;

        // If largest is not root
        if (max != i) {
            int swap = arr[i];
            arr[i] = arr[max];
            arr[max] = swap;

            // Recursively heapify the affected sub-tree
            heapify(arr, N, max);
        }
    }
    static void printArray(int arr[])
    {
        int N = arr.length;
        for (int i = 0; i < N; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    public static void main(String args[])
    {
        int arr[] = { 50, 24, 12, 4, 89 };
        int N = arr.length;
        // Function call
        Heap_sort obj = new Heap_sort();
        obj.sort(arr);
        printArray(arr);
    }
}
